#!/bin/sh

VERSION=0.3.0

# build-jack-fox:
#
#  A tool for automating a custom build of Firefox with libjack (primarily
#  for people wanting to avoid installing PulseAudio
#
#  Copyright Â© 2017-2018 Rowan Thorpe <rowan@rowanthorpe.com>
#
#  build-jack-fox is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  build-jack-fox is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with build-jack-fox. If not, see <http://www.gnu.org/licenses/>.

set -e

# define functions

warn() { printf "${@}" | sed -e "s/^/${scriptname}: /" >&2; }

die() { warn "${@}"; exit 1; }

dprintf() { test 0 -eq ${debug} || { printf \\n; printf "${@}" | sed -e 's/^/---> /'; printf \\n; } >&2; }

get_full_versions() { apt-cache policy "${1}" | sed -n -e 's/^ \(\*\*\*\|   \) \([^ ]\+\) .*$/\2/' -e tP -e b -e :P -e p; }

get_short_versions() { get_full_versions "${@}" | sed -e 's/-.*$//'; }

get_nonlocal_full_versions() { # $1=pkgname, $2=upstream-version
  get_full_versions "${1}" | sed -e "/-${local_version_suffix_regex}\$/ d" | \
    if test -n "${2}"; then
      sed -e "/^$(printf '%s\n' "${2}" | sed -e 's/\./\\./g' )-/! d"
    else
      cat
    fi
}

lang_capital() {
  printf %s "${1}" | cut -d- -f1 | tr -d '\n'
  if printf '%s' "${1}" | grep -q -- -; then
    printf -- -; printf '%s' "${1}" | cut -d- -f2- | tr '[a-z]' '[A-Z]'
  fi
}

get_user_full_name() { { getent passwd $(id -run) 2>/dev/null || : ; } | cut -d: -f5 | cut -d, -f1; }

get_user_email() { { getent aliases $(id -run) 2>/dev/null || : ; } | sed -e 's/^[^ \t]\+:[ \t]\+//' | grep '@' || : ; }

usage() {
  cat <<EOF
\`build-jack-fox' is an automation script for downloading, customizing and
building (on Debian or a derivative distro) a version of the latest Firefox
browser with Jack audio (so you don't need to install PulseAudio, for example).

Usage:
${scriptname} [--help, -h]
${scriptname} [--version, -V]
${scriptname} [--list-versions, --list-jack-versions]
${scriptname} [
EOF
  {
    for _flag_name in ${valflags_names}; do
      printf '%s  --%-30s (default: %s),\n' "${scriptnspc}" "$(printf '%s\n' "${_flag_name}" | sed -e 's/_/-/g') \"X\"" "$(
        eval "
          if test -n \"\${${_flag_name}_def}\"; then
            printf '%s' \"\${${_flag_name}_def}\"
          elif test -n \"\${${_flag_name}}\"; then
            printf '%s' \"\${${_flag_name}}\"
          else
            printf '[runtime-calculated]'
          fi
        "
      )"
    done
    for _flag_name in ${optflags_names}; do
      _flag_suffix="$(printf '%s\n' "${_flag_name}" | sed -e 's/_/-/g')"
      printf '%s  --disable-%-22s --enable-%-22s (default: %s),\n' "${scriptnspc}" "${_flag_suffix}" "${_flag_suffix}" "$(
        eval "_x=\${${_flag_name}_def}"
        if test 0 -eq ${_x}; then
          printf 'disabled'
        else
          printf 'enabled'
        fi
      )"
    done
  } | sed -e '$ s/,$//'
  cat <<EOF
${scriptnspc} ]

Report bugs to <rowan@rowanthorpe.com>.
EOF
}

version() {
  cat <<EOF
build-jack-fox ${VERSION}

Copyright (C) 2017, 2018 Rowan Thorpe.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Written by Rowan Thorpe <rowan@rowanthorpe.com>
EOF
}

# globals & defaults

scriptname="$(basename "${0}")"
scriptnspc="$(printf '%s\n' "${scriptname}" | sed -e 's/./ /g')"
jack_dev_pkg_candidates='libjack-jackd2-dev libjack-dev'

debug_def=0
batch_def=0
download_def=1
patch_def=1
install_build_deps_def=1
unpack_def=1
build_def=1
pre_build_clean_def=1
tests_def=0
install_def=0

upstream_version_def=''
srcdir_def="/usr/local/src/${scriptname}"
local_version_suffix_def='local1'
local_version_suffix_regex_def='local[0-9]\+'
jack_dev_pkg_def='libjack-jackd2-dev'
jack_upstream_version_def=''
date_def=''
name_def="${DEBFULLNAME:-$(get_user_full_name)}"; name_def="${name_def:-Blah Blah}"
email_def="${DEBEMAIL:-$(get_user_email)}"; email_def="${email_def:-blah@example.com}"
langs_def=''

# source configfile

_conf="$(readlink -e "${0}")-conf.sh"
if test -s "${_conf}"; then
  . "${_conf}"
else
  _conf="${_conf}.template"
fi
for _x in optflags valflags; do
  eval '
    '${_x}'_names="$(
      sed -n \
        -e "/^## '${_x}' /,/^## /! b" \
        -e "s/^#\\?\\([a-z][a-z_]*\\)=.*\$/\\1/" \
        -e "tP" \
        -e "b" \
        -e ":P" \
        -e "p" \
        "${_conf}" | sort -u | tr \\n " " | sed -e "\$ s/ \$//"
    )"
  '
done
unset _x
unset _conf

# getopts

while test ${#} -ne 0; do
  case "${1}" in
    --help|-h)
      usage
      exit 0
      ;;
    --version|-V)
      version
      exit 0
      ;;
    --list-versions)
      get_full_versions 'firefox'
      exit 0
      ;;
    --list-jack-versions)
      for _jack_dev_pkg in ${jack_dev_pkg_candidates}; do
        printf '%s:\n' "${_jack_dev_pkg}"
        get_full_versions "${_jack_dev_pkg}" | sed -e 's/^/ /'
      done
      exit 0
      ;;
  esac
  eval '
    case "${1}" in
      '$(printf '%s\n' "${valflags_names}" | sed -e 's/_/-/g' -e 's/\(^\| \)/\1--/g' -e 's/ /|/g')')
        eval "$(printf %s\\n "${1}" | sed -e "s/^--//" -e "s/-/_/g")=\"\${2}\""
        shift 2
        ;;
      '$(printf '%s\n' "${optflags_names}" | sed -e 's/_/-/g' -e 's/\(^\| \)/\1--disable-/g' -e 's/ /|/g')')
        eval "$(printf %s\\n "${1}" | sed -e "s/^--disable-//" -e "s/-/_/g")=0"
        shift
        ;;
      '$(printf '%s\n' "${optflags_names}" | sed -e 's/_/-/g' -e 's/\(^\| \)/\1--enable-/g' -e 's/ /|/g')')
        eval "$(printf %s\\n "${1}" | sed -e "s/^--enable-//" -e "s/-/_/g")=1"
        shift
        ;;
      --)
        shift
        break
        ;;
      -*)
        die "Unrecognized flag \"%s\"\\n" "${1}"
        ;;
      *)
        break
        ;;
    esac
  '
done
for _flag_name in ${optflags_names} ${valflags_names}; do
  eval "${_flag_name}=\"\${${_flag_name}:-\${${_flag_name}_def}}\""
done

# setup

srcdir="${srcdir:-${srcdir_def}}"
local_version_suffix="${local_version_suffix:-${local_version_suffix_def}}"
local_version_suffix_regex="${local_version_suffix_regex:-${local_version_suffix_regex_def}}"
jack_dev_pkg="${jack_dev_pkg:-${jack_dev_pkg_def}}"
name="${name:-${name_def}}"
email="${email:-${email_def}}"
date="${date:-$(LC_ALL=C date '+%a, %e %b %Y %H:%M:%S %z')}"

latest_nonlocal_full_version="$(get_nonlocal_full_versions 'firefox' ${upstream_version} | head -n 1)"
jack_full_version="$(get_nonlocal_full_versions "${jack_dev_pkg}" ${jack_upstream_version} | head -n 1)"

latest_nonlocal_full_filename_version="$(printf '%s' "${latest_nonlocal_full_version}" | sed -e 's/+.*$//')"
jack_full_filename_version="$(printf '%s' "${jack_full_version}" | sed -e 's/+.*$//')"

upstream_version="${upstream_version:-$(printf '%s' "${latest_nonlocal_full_version}" | sed -e 's/-.*$//')}"
jack_upstream_version="${jack_upstream_version:-$(printf '%s' "${jack_full_version}" | sed -e 's/-.*$//')}"

# sanity checks

test -d "${srcdir}" || die '"%s" is not a directory.\n' "${srcdir}"
eval 'case "${jack_dev_pkg}" in '$(printf '%s\n' "${jack_dev_pkg_candidates}" | sed -e 's/ /|/g')') : ;; *) die '\''"%s" is not a recognized jack devel package.\n'\'' "${jack_dev_pkg}" ;; esac'
printf '%s\n' "${date}" | grep -q '^\(Mon\|Tue\|Wed\|Thu\|Fri\|Sat\|Sun\), \([0 ][1-9]\|[1-2][0-9]\|3[0-1]\) \(Jan\|Feb\|Mar\|Apr\|May\|Jun\|Jul\|Aug\|Sep\|Oct\|Nov\|Dec\) [1-2][0-9][0-9][0-9] \([0-1][0-9]\|2[0-3]\):[0-5][0-9]:[0-5][0-9] [-+]\([0-1][0-9]\|2[0-3]\)[0-5][0-9]$' || die '"%s" is not a correctly formatted date (i.e. `date "+%a, %e %b %Y %H:%M:%S %z"`).\n' "${date}"
get_short_versions 'firefox' | grep -q "^$(printf '%s\n' "${upstream_version}" | sed -e 's/\./\\./g')\$" || die 'invalid/unavailable upstream version "%s".\n' "${upstream_version}"
get_short_versions "${jack_dev_pkg}" | grep -q "^$(printf '%s\n' "${jack_upstream_version}" | sed -e 's/\./\\./g')\$" || die 'invalid/unavailable upstream jack version "%s".\n' "${jack_upstream_version}"

# preflight

{
  cat <<EOF
==========
latest_nonlocal_full_version=${latest_nonlocal_full_version}
latest_nonlocal_full_filename_version=${latest_nonlocal_full_filename_version}
jack_full_version=${jack_full_version}
jack_full_filename_version=${jack_full_filename_version}

EOF
  for _flag_name in ${valflags_names}; do
    if test "x${_flag_name}" = "xlangs" && test -z "${langs}"; then
      printf 'langs=[all langs provided by upstream package]\n'
    else
      eval "printf '%s=%s\\n' \"\${_flag_name}\" \"\${${_flag_name}}\""
    fi
  done
  printf \\n
  for _flag_name in ${optflags_names}; do
    eval "printf '%s=%s\\n' \"\${_flag_name}\" \"\${${_flag_name}}\""
  done
  cat <<EOF
==========
<Hit enter to continue, ctrl-C (or equivalent) to interrupt>
EOF
} >&2
test 1 -eq ${batch} || read temp

DEBFULLNAME="${name}"
export DEBFULLNAME
DEBEMAIL="${email}"
export DEBEMAIL

dprintf 'cd "%s"\n' "${srcdir}"
cd "${srcdir}"

if test 1 -eq ${download}; then
  dprintf 'apt-get --dsc-only source "firefox=%s"\n' "${latest_nonlocal_full_version}"
  apt-get --dsc-only source "firefox=${latest_nonlocal_full_version}"
  dprintf 'apt-get --diff-only source "firefox=%s"\n' "${latest_nonlocal_full_version}"
  apt-get --diff-only source "firefox=${latest_nonlocal_full_version}"
  deb_diff_extension="$(
    sed -n \
      -e "s/^.*\\<firefox_${latest_nonlocal_full_filename_version}\\.debian\\.tar\\.\\(bz2\\|xz\\)\\>.*\$/\\1/" "firefox_${latest_nonlocal_full_filename_version}.dsc" \
      -e 't PRINT' \
      -e 'b' \
      -e ': PRINT' \
      -e 'p' \
      -e 'q' \
      "firefox_${latest_nonlocal_full_filename_version}.dsc"
  )"
  orig_tar_extension="$(
    sed -n \
      -e "s/^.*\\<firefox_${upstream_version}\\.orig\\.tar\\.\\(bz2\\|xz\\)\\>.*\$/\\1/" "firefox_${latest_nonlocal_full_filename_version}.dsc" \
      -e 't PRINT' \
      -e 'b' \
      -e ': PRINT' \
      -e 'p' \
      -e 'q' \
      "firefox_${latest_nonlocal_full_filename_version}.dsc"
  )"
  lang_tar_extension="$(
    sed -n \
      -e "s/^.*\\<firefox_${upstream_version}\\.orig-l10n-[^.]\\+\\.tar\\.\\(bz2\\|xz\\)\\>.*\$/\\1/" "firefox_${latest_nonlocal_full_filename_version}.dsc" \
      -e 't PRINT' \
      -e 'b' \
      -e ': PRINT' \
      -e 'p' \
      -e 'q' \
      "firefox_${latest_nonlocal_full_filename_version}.dsc"
  )"
  if test -z "${langs}"; then
    dprintf 'apt-get --tar-only source "firefox=%s"\n' "${latest_nonlocal_full_version}"
    apt-get --tar-only source "firefox=${latest_nonlocal_full_version}"
  else
    dprintf 'curl --continue-at - --location --output "firefox_%s.orig.tar.%s" "http://http.debian.net/debian/pool/main/f/firefox/firefox_%s.orig.tar.%s"\n' "${upstream_version}" "${orig_tar_extension}" "${upstream_version}" "${orig_tar_extension}"
    curl --continue-at - --location --output "firefox_${upstream_version}.orig.tar.${orig_tar_extension}" "http://http.debian.net/debian/pool/main/f/firefox/firefox_${upstream_version}.orig.tar.${orig_tar_extension}"
    for _lang in ${langs}; do
      dprintf 'curl --continue-at - --location --output "firefox_%s.orig-l10n-%s.tar.%s" "http://http.debian.net/debian/pool/main/f/firefox/firefox_%s.orig-l10n-%s.tar.%s"\n' "${upstream_version}" "$(lang_capital "${_lang}")" "${lang_tar_extension}" "${upstream_version}" "$(lang_capital "${_lang}")" "${lang_tar_extension}"
      curl --continue-at - --location --output "firefox_${upstream_version}.orig-l10n-$(lang_capital "${_lang}").tar.${lang_tar_extension}" "http://http.debian.net/debian/pool/main/f/firefox/firefox_${upstream_version}.orig-l10n-$(lang_capital "${_lang}").tar.${lang_tar_extension}"
    done
  fi
  dprintf 'dscverify "firefox_%s.dsc\n' "${latest_nonlocal_full_filename_version}"
  dscverify "firefox_${latest_nonlocal_full_filename_version}.dsc"
fi

if test 0 -eq ${patch}; then
  test 1 -eq ${tests} || \
    warn 'tests have been disabled but patching is being skipped so the tests will only be disabled if previously patched as such.\n'
else
  dprintf 'tar xJf "firefox_%s.debian.tar.%s"\n' "${latest_nonlocal_full_filename_version}" "${deb_diff_extension}"
  tar xJf "firefox_${latest_nonlocal_full_filename_version}.debian.tar.${deb_diff_extension}"
  dprintf 'cd debian\n'
  cd debian
  # NB: Patching control.in and control files is annoying duplication, but to rebuild the dependent files "debian/rules" (which is a makefile)
  # requires the upstream source also be unpacked first. Not worth it.
  ## jack dep
  dprintf 'sed -i -e "s/^\\(Build-Depends: \\)/\\1%s,\\n               /" control.in\n' "${jack_dev_pkg}"
  sed -i -e "s/^\\(Build-Depends: \\)/\\1${jack_dev_pkg},\\n               /" control.in
  dprintf 'sed -i -e "s/^\\(Build-Depends: \\)/\\1%s,\\n               /" control\n' "${jack_dev_pkg}"
  sed -i -e "s/^\\(Build-Depends: \\)/\\1${jack_dev_pkg},\\n               /" control
  dprintf 'sed -i -e "/^ac_add_options --prefix=\\/usr\$/ a \\
ac_add_options --enable-jack" browser.mozconfig.in\n'
  sed -i -e "/^ac_add_options --prefix=\\/usr\$/ a \\
ac_add_options --enable-jack" browser.mozconfig.in
  ## tests
  if test 0 -eq ${tests}; then
    dprintf 'sed -i -e "/^ac_add_options --prefix=\\/usr\$/ a \\
ac_add_options --disable-tests" browser.mozconfig.in\n'
    sed -i -e "/^ac_add_options --prefix=\\/usr\$/ a \\
ac_add_options --disable-tests" browser.mozconfig.in
  fi
  ## langs
  dprintf 'sed -i -e "/^\\($(printf '\''%s'\'' "%s" | sed -e '\''s/ \+/\\|/g'\'')\\):/!d" l10n/recommends\n' "${langs}"
  sed -i -e "/^\\($(printf '%s' "${langs}" | sed -e 's/ \+/\\|/g')\\):/!d" l10n/recommends
  ## changelog
  dprintf 'sed -i -e "1 i \\
firefox (%s-%s) experimental; urgency=low\\
\\
  Customizations:\\
\\
  * Include jack support\\
\\
  * Shorten compile-time by:\\
    -- removing build of unneeded locales\\
    -- removing build of tests\\
\\
 -- %s <%s>  %s\\
" changelog\n' "${upstream_version}" "${local_version_suffix}" "${name}" "${email}" "${date}"
  sed -i -e "1 i \\
firefox (${upstream_version}-${local_version_suffix}) experimental; urgency=low\\
\\
  Customizations:\\
\\
  * Include jack support\\
\\
  * Shorten compile-time by:\\
    -- removing build of unneeded locales\\
    -- removing build of tests\\
\\
 -- ${name} <${email}>  ${date}\\
" changelog
  dprintf 'cd ..\n'
  cd ..
  ## rebuild debian files
  dprintf 'fakeroot tar cJf "firefox_%s-%s.debian.tar.%s" debian\n' "${upstream_version}" "${local_version_suffix}" "${deb_diff_extension}"
  fakeroot tar cJf "firefox_${upstream_version}-${local_version_suffix}.debian.tar.${deb_diff_extension}" debian
  dprintf 'rm -fr debian "firefox_%s.debian.tar.%s"\n' "${latest_nonlocal_full_filename_version}" "${deb_diff_extension}"
  rm -fr debian "firefox_${latest_nonlocal_full_filename_version}.debian.tar.${deb_diff_extension}"
  dprintf 'sed \
    -e "/^Binary:/b LOOP" \
    -e "/^-----BEGIN PGP SIGNATURE-----\$/,/^-----END PGP SIGNATURE-----\$/d" \
    -e "s/^\\(Build-Depends:\\)/\\1 %s,/" \
    -e "/^\\( \\|\$\\|Hash:\\|-----BEGIN PGP SIGNED MESSAGE-----\$\\)/d" \
    -e "s/^\\(Version:\\) .*\$/\\1 %s-%s/" \
    -e "s/^\\(Package-List:\\)\$/\\1\\n%s/" \
    -e "s/^\\(Checksums-Sha1:\\)\$/\\1\\n%s/" \
    -e "s/^\\(Checksums-Sha256:\\)\$/\\1\\n%s/" \
    -e "s/^\\(Files:\\)\$/\\1\\n%s/" \
    -e "b" \
    -e ":LOOP" \
    -e "N" \
    -e "/,\$/!b EXITLOOP" \
    -e "b LOOP" \
    -e ":EXITLOOP" \
    -e "s/\\n//g" \
    -e "s/^.*\$/Binary: firefox, firefox-l10n-all, %s/" \
    "firefox_%s.dsc" >"firefox_%s-%s.dsc"\n' \
  "${jack_dev_pkg}" \
  "${upstream_version}" \
  "${local_version_suffix}" \
  "$(
    sed -n \
      -e "/^Package-List:\$/,/^[^ ]/! b" \
      -e "/^ firefox\\(-l10n-\\($(printf %s\\n "${langs}" | sed -e "s/ \\+/\\\\|/g")\\)\\)\\? deb /! b" \
      -e "p" \
      "firefox_${latest_nonlocal_full_filename_version}.dsc" | sed -e "\$! s/\$/\\\\n/" | tr -d "\\n"
  )" \
  "$(
    sed -n \
      -e "/^Checksums-Sha1:\$/,/^[^ ]/! b" \
      -e "/^ /! b" \
      -e "/ firefox_${upstream_version}\\.orig\\(\\.tar\\.${orig_tar_extension}\\|-l10n-\\($(for _lang in ${langs}; do printf "%s\\|" "$(lang_capital "${_lang}")"; done | sed -e "s/\\\\|\$//")\\)\\.tar\\.${lang_tar_extension}\\)/! b" \
      -e "\$! s/\$/\\\\n/" \
      -e "p" \
      "firefox_${latest_nonlocal_full_filename_version}.dsc" | tr -d "\\n"
    printf " %s %s firefox_%s-%s.debian.tar.%s" "$(
      sha1sum "firefox_${upstream_version}-${local_version_suffix}.debian.tar.${deb_diff_extension}" | cut -d" " -f1
    )" "$(
      wc -c "firefox_${upstream_version}-${local_version_suffix}.debian.tar.${deb_diff_extension}" | cut -d" " -f1
    )" "${upstream_version}" "${local_version_suffix}" "${deb_deff_extension}"
  )" \
  "$(
    sed -n \
      -e "/^Checksums-Sha256:\$/,/^[^ ]/! b" \
      -e "/^ /! b" \
      -e "/ firefox_${upstream_version}\\.orig\\(\\.tar\\.${orig_tar_extension}\\|-l10n-\\($(for _lang in ${langs}; do printf "%s\\|" "$(lang_capital "${_lang}")"; done | sed -e "s/\\\\|\$//")\\)\\.tar\\.${lang_tar_extension}\\)/! b" \
      -e "\$! s/\$/\\\\n/" \
      -e "p" \
      "firefox_${latest_nonlocal_full_filename_version}.dsc" | tr -d "\\n"
    printf " %s %s firefox_%s-%s.debian.tar.%s" "$(
      sha256sum "firefox_${upstream_version}-${local_version_suffix}.debian.tar.${deb_diff_extension}" | cut -d" " -f1
    )" "$(
      wc -c "firefox_${upstream_version}-${local_version_suffix}.debian.tar.${deb_diff_extension}" | cut -d" " -f1
    )" "${upstream_version}" "${local_version_suffix}" "${deb_diff_extension}"
  )" \
  "$(
    sed -n \
      -e "/^Files:\$/,/^[^ ]/! b" \
      -e "/^ /! b" \
      -e "/ firefox_${upstream_version}\\.orig\\(\\.tar\\.${orig_tar_extension}\\|-l10n-\\($(for _lang in ${langs}; do printf "%s\\|" "$(lang_capital "${_lang}")"; done | sed -e "s/\\\\|\$//")\\)\\.tar\\.${lang_tar_extension}\\)/! b" \
      -e "\$! s/\$/\\\\n/" \
      -e "p" \
      "firefox_${latest_nonlocal_full_filename_version}.dsc" | tr -d "\\n"
    printf " %s %s firefox_%s-%s.debian.tar.%s" "$(
      md5sum "firefox_${upstream_version}-${local_version_suffix}.debian.tar.${deb_diff_extension}" | cut -d" " -f1
    )" "$(
      wc -c "firefox_${upstream_version}-${local_version_suffix}.debian.tar.${deb_diff_extension}" | cut -d" " -f1
    )" "${upstream_version}" "${local_version_suffix}" "${deb_diff_extension}"
  )" \
  "$(for _lang in ${langs}; do printf "firefox-l10n-%s, " "${_lang}"; done | sed -e "s/, \$//")" \
  "${latest_nonlocal_full_filename_version}" \
  "${upstream_version}" \
  "${local_version_suffix}"
  sed \
    -e "/^Binary:/b LOOP" \
    -e "/^-----BEGIN PGP SIGNATURE-----\$/,/^-----END PGP SIGNATURE-----\$/d" \
    -e "s/^\\(Build-Depends:\\)/\\1 ${jack_dev_pkg},/" \
    -e "/^\\( \\|\$\\|Hash:\\|-----BEGIN PGP SIGNED MESSAGE-----\$\\)/d" \
    -e "s/^\\(Version:\\) .*\$/\\1 ${upstream_version}-${local_version_suffix}/" \
    -e "s/^\\(Package-List:\\)\$/\\1\\n$(
      sed -n \
        -e "/^Package-List:\$/,/^[^ ]/! b" \
        -e "/^ firefox\\(-l10n-\\($(printf %s\\n "${langs}" | sed -e "s/ \\+/\\\\|/g")\\)\\)\\? deb /! b" \
        -e "p" \
        "firefox_${latest_nonlocal_full_filename_version}.dsc" | sed -e "\$! s/\$/\\\\n/" | tr -d "\\n"
    )/" \
    -e "s/^\\(Checksums-Sha1:\\)\$/\\1\\n$(
      sed -n \
        -e "/^Checksums-Sha1:\$/,/^[^ ]/! b" \
        -e "/^ /! b" \
        -e "/ firefox_${upstream_version}\\.orig\\(\\.tar\\.${orig_tar_extension}\\|-l10n-\\($(for _lang in ${langs}; do printf "%s\\|" "$(lang_capital "${_lang}")"; done | sed -e "s/\\\\|\$//")\\)\\.tar\\.${lang_tar_extension}\\)/! b" \
        -e "\$! s/\$/\\\\n/" \
        -e "p" \
        "firefox_${latest_nonlocal_full_filename_version}.dsc" | tr -d "\\n"
      printf " %s %s firefox_%s-%s.debian.tar.%s" "$(
        sha1sum "firefox_${upstream_version}-${local_version_suffix}.debian.tar.${deb_diff_extension}" | cut -d" " -f1
      )" "$(
        wc -c "firefox_${upstream_version}-${local_version_suffix}.debian.tar.${deb_diff_extension}" | cut -d" " -f1
      )" "${upstream_version}" "${local_version_suffix}" "${deb_diff_extension}"
    )/" \
    -e "s/^\\(Checksums-Sha256:\\)\$/\\1\\n$(
      sed -n \
        -e "/^Checksums-Sha256:\$/,/^[^ ]/! b" \
        -e "/^ /! b" \
        -e "/ firefox_${upstream_version}\\.orig\\(\\.tar\\.${orig_tar_extension}\\|-l10n-\\($(for _lang in ${langs}; do printf "%s\\|" "$(lang_capital "${_lang}")"; done | sed -e "s/\\\\|\$//")\\)\\.tar\\.${lang_tar_extension}\\)/! b" \
        -e "\$! s/\$/\\\\n/" \
        -e "p" \
        "firefox_${latest_nonlocal_full_filename_version}.dsc" | tr -d "\\n"
      printf " %s %s firefox_%s-%s.debian.tar.%s" "$(
        sha256sum "firefox_${upstream_version}-${local_version_suffix}.debian.tar.${deb_diff_extension}" | cut -d" " -f1
      )" "$(
        wc -c "firefox_${upstream_version}-${local_version_suffix}.debian.tar.${deb_diff_extension}" | cut -d" " -f1
      )" "${upstream_version}" "${local_version_suffix}" "${deb_diff_extension}"
    )/" \
    -e "s/^\\(Files:\\)\$/\\1\\n$(
      sed -n \
        -e "/^Files:\$/,/^[^ ]/! b" \
        -e "/^ /! b" \
        -e "/ firefox_${upstream_version}\\.orig\\(\\.tar\\.${orig_tar_extension}\\|-l10n-\\($(for _lang in ${langs}; do printf "%s\\|" "$(lang_capital "${_lang}")"; done | sed -e "s/\\\\|\$//")\\)\\.tar\\.${lang_tar_extension}\\)/! b" \
        -e "\$! s/\$/\\\\n/" \
        -e "p" \
        "firefox_${latest_nonlocal_full_filename_version}.dsc" | tr -d "\\n"
      printf " %s %s firefox_%s-%s.debian.tar.%s" "$(
        md5sum "firefox_${upstream_version}-${local_version_suffix}.debian.tar.${deb_diff_extension}" | cut -d" " -f1
      )" "$(
        wc -c "firefox_${upstream_version}-${local_version_suffix}.debian.tar.${deb_diff_extension}" | cut -d" " -f1
      )" "${upstream_version}" "${local_version_suffix}" "${deb_diff_extension}"
    )/" \
    -e "b" \
    -e ":LOOP" \
    -e "N" \
    -e "/,\$/!b EXITLOOP" \
    -e "b LOOP" \
    -e ":EXITLOOP" \
    -e "s/\\n//g" \
    -e "s/^.*\$/Binary: firefox, firefox-l10n-all, $(
      for _lang in ${langs}; do
        printf "firefox-l10n-%s, " "${_lang}"
      done | sed -e "s/, \$//"
    )/" \
    "firefox_${latest_nonlocal_full_filename_version}.dsc" >"firefox_${upstream_version}-${local_version_suffix}.dsc"
  dprintf 'rm -f "firefox_%s.dsc"\n' "${latest_nonlocal_full_filename_version}"
  rm -f "firefox_${latest_nonlocal_full_filename_version}.dsc"
fi

if test 1 -eq ${install_build_deps}; then
  dprintf 'mk-build-deps "firefox_%s-%s.dsc" '\''firefox-build-deps'\'' || :\n' "${upstream_version}" "${local_version_suffix}"
  mk-build-deps "firefox_${upstream_version}-${local_version_suffix}.dsc" 'firefox-build-deps' || : # this seems to "error" if this package is not pre-existing(!)
  dprintf 'sudo dpkg -i "firefox-build-deps_%s-%s_"*".deb" || sudo apt-get -f install\n' "${upstream_version}" "${local_version_suffix}"
  sudo dpkg -i "firefox-build-deps_${upstream_version}-${local_version_suffix}_"*".deb" || sudo apt-get -f install
fi

if test 1 -eq ${unpack}; then
  dprintf '! test -e "firefox-%s" || mv -fv "firefox-%s" "firefox-%s-bak%s"\n' "${upstream_version}" "${upstream_version}" "${upstream_version}" "${$}"
  ! test -e "firefox-${upstream_version}" || mv -fv "firefox-${upstream_version}" "firefox-${upstream_version}-bak${$}"
  dprintf 'dpkg-source -x "firefox_%s-%s.dsc"\n' "${upstream_version}" "${local_version_suffix}"
  dpkg-source -x "firefox_${upstream_version}-${local_version_suffix}.dsc"
fi

if test 1 -eq ${build}; then
  printf '*** About to build the package. Once this is running OK for a few seconds, expect it to run unattended for an hour or two.\n' >&2
  dprintf 'sleep 2\n'
  sleep 2
  dprintf 'cd "firefox-%s"\n' "${upstream_version}"
  cd "firefox-${upstream_version}"
  if test 0 -eq ${pre_build_clean}; then
    _cmd_suffix='--no-pre-clean'
  else
    _cmd_suffix=''
  fi
  dprintf 'dpkg-buildpackage -rfakeroot -b --no-sign %s\n' "${_cmd_suffix}"
  dpkg-buildpackage -rfakeroot -b --no-sign ${_cmd_suffix}
  unset _cmd_suffix
  dprintf 'cd ..\n'
  cd ..
fi

if test 1 -eq ${install}; then
  dprintf 'sudo dpkg -i "firefox_%s-%s_amd64.deb" %s\n' "${upstream_version}" "${local_version_suffix}" "$(
    for _lang in ${langs}; do
      printf 'firefox-l10n-%s_%s-%s_all.deb ' "${_lang}" "${upstream_version}" "${local_version_suffix}"
    done
  )"
  sudo dpkg -i "firefox_${upstream_version}-${local_version_suffix}_amd64.deb" $(
    for _lang in ${langs}; do
      printf 'firefox-l10n-%s_%s-%s_all.deb ' "${_lang}" "${upstream_version}" "${local_version_suffix}"
    done
  )
fi
